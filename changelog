ver 0.15

Резюме текущей функциональности
Ваш проект теперь способен:

Загружать несколько видеофайлов: На странице upload.html вы можете выбрать один или несколько видеофайлов для загрузки.
Отображать прогресс загрузки для каждого файла:
Появится отдельный блок для каждого выбранного видео.
В этом блоке будет прогресс-бар, который показывает процент загрузки файла на внешний API.
Также будет отображаться общий статус загрузки вверху страницы.
Динамически создавать спойлеры с метаданными:
Для каждого загружаемого файла создается кнопка спойлера с названием видео.
После успешной загрузки и анализа файла внешним API, метаданные видео (имя, размер, формат, потоки, GPS-данные) будут отображены внутри этого спойлера.
Спойлер не открывается автоматически; его нужно будет открыть кликом.
Визуальная индикация загрузки на кнопке спойлера ("золотая заливка"):
По мере загрузки файла, кнопка спойлера будет постепенно "заливаться" золотым цветом, визуально отображая прогресс.
Когда загрузка файла завершится (достигнет 100%), кнопка спойлера останется полностью золотой и начнет пульсировать, указывая на успешное завершение обработки.
Форма для социальных сетей: На странице upload.html также присутствует форма для ввода данных социальных сетей, которая обрабатывается JavaScript (сейчас просто выводит в консоль и показывает alert).
Что было изменено в коде:

analyze.js:
Логика uploadVideos была изменена для динамического создания элементов video-info-item, spoiler-btn, progress-bar-container и metadataContent для каждого файла.
Добавлен spoilerBtn.style.setProperty('--upload-progress', \${percent}%`);` для динамического обновления золотой заливки кнопки спойлера.
Класс loaded-spoiler-btn теперь добавляется к кнопке спойлера только после 100% загрузки файла, чтобы активировать финальные стили (пульсацию).
Функция showResult теперь принимает элементы DOM в качестве аргументов для обновления конкретного спойлера.
style.css:
Добавлены стили для .spoiler-btn::before для создания эффекта прогрессивной золотой заливки с использованием CSS-переменной --upload-progress.
Обновлены стили для .loaded-spoiler-btn для финального золотого вида и пульсации после завершения загрузки.
Теперь ваш инструмент стал гораздо более интерактивным и информативным для пользователя во время процесса загрузки и анализа видео!
---------------------------------------

-------------------------------
Hife ver 0.15.5
-------------------------------
Это довольно большое изменение, так как оно включает в себя:

-Создание новой HTML-страницы: results.html.
-Новый JavaScript-файл: script/results.js для логики этой страницы.
-Изменение script/analyze.js: После загрузки и анализа видео будет происходить перенаправление на results.html с передачей необходимых данных.
-Хранение данных: Поскольку нам нужно передавать метаданные между страницами, мы будем использовать IndexedDB, которую вы уже настроили. Это позволит сохранять результаты анализа каждого видео и затем отображать их на новой странице.
-Новые CSS-стили: Для "пузырей" и модальных окон.

-------------------------------
Hife ver 0.16
-------------------------------
New Feature: Enhanced Video Upload Workflow with Per-File Validation
This update significantly refines the video upload experience on the platform, introducing robust client-side validation and a more controlled submission process.

Key Additions & Improvements:

Mandatory Instagram Input: The "Upload Video(s)" button is now disabled until at least the Instagram username field is filled out, and at least one social media field (Instagram, LinkedIn, or Email) contains input. This ensures essential user identification before proceeding.
Staged Upload Process:
The "Upload Video(s)" button (#selectFilesButton) now serves to open the file selection dialog instead of directly initiating an upload.
A new "Finish and Upload" button (#finishUploadButton) has been introduced. This button is initially hidden and disabled.
Client-Side Per-File Validation:
Upon selecting files, each video file undergoes individual validation directly in the browser.
Size Validation: Files exceeding 100 MB are flagged.
Duration Validation: Videos longer than 5 minutes are flagged.
For each selected file, a clear status message (e.g., "OK," "Too large," "Too long") is displayed in a dedicated list (#fileValidationStatusList).
Conditional "Finish" Button Activation: The "Finish and Upload" button becomes visible and active only if at least one video file passes all validation checks. If all selected files fail validation, the button remains hidden.
Controlled Backend Submission: Only after the user clicks the "Finish and Upload" button are the valid files submitted to the backend for Cloudinary upload.
Individual Upload Progress Tracking: During the final upload phase, each file now displays its own real-time upload progress bar, providing clear feedback.
Redirect to Results Page: After all valid files have been sent to the backend, the user is automatically redirected to the results.html page to monitor the processing status of their videos.
Technical Refinements:

Code Separation: The frontend logic has been significantly refactored. upload_validation.js now manages the entire user interaction flow, including social input validation, file selection, and per-file validation. analyze.js is now solely responsible for handling the actual AJAX requests for video uploads and displaying their progress.
Improved Element IDs: HTML elements on upload.html have been updated with more descriptive IDs to clarify their roles in the new workflow (e.g., videoFileInput, selectFilesButton, finishUploadButton, fileValidationStatusList, videoUploadProgressList).
