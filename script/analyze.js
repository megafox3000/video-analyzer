// analyze.js

// –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã DOM –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã upload.html
const fileInput = document.getElementById('videoUpload');
const uploadLabel = document.querySelector('.upload-label'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ label
const uploadStatus = document.getElementById('uploadStatus');
const videoInfoList = document.getElementById('videoInfoList'); // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ
const instagramInput = document.getElementById('instagramInput'); // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–µ Instagram

// --- IndexedDB Setup ---
const DB_NAME = 'HifeVideoAnalyzerDB';
const DB_VERSION = 1;
const USER_STORE_NAME = 'users';
const VIDEO_STORE_NAME = 'videos';

let db;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö IndexedDB
function openDatabase() {
    return new Promise((resolve, reject) => {
        const request = indexedDB.open(DB_NAME, DB_VERSION);

        request.onupgradeneeded = (event) => {
            db = event.target.result;
            if (!db.objectStoreNames.contains(USER_STORE_NAME)) {
                db.createObjectStore(USER_STORE_NAME, { keyPath: 'instagramUsername' });
            }
            if (!db.objectStoreNames.contains(VIDEO_STORE_NAME)) {
                const videoStore = db.createObjectStore(VIDEO_STORE_NAME, { keyPath: 'id', autoIncrement: true });
                videoStore.createIndex('by_instagram', 'instagramUsername', { unique: false });
            }
        };

        request.onsuccess = (event) => {
            db = event.target.result;
            console.log('IndexedDB opened successfully.');
            resolve(db);
        };

        request.onerror = (event) => {
            console.error('IndexedDB error:', event.target.errorCode);
            reject('IndexedDB error');
        };
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ)
async function saveUser(instagramUsername, linkedin, email) {
    if (!db) await openDatabase(); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞
    return new Promise((resolve, reject) => {
        const transaction = db.transaction([USER_STORE_NAME], 'readwrite');
        const store = transaction.objectStore(USER_STORE_NAME);
        const user = { instagramUsername, linkedin, email, lastUpdated: new Date().toISOString() };
        const request = store.put(user); // put() –æ–±–Ω–æ–≤–ª—è–µ—Ç, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç

        request.onsuccess = () => {
            console.log('User saved:', user);
            resolve();
        };

        request.onerror = (event) => {
            console.error('Error saving user:', event.target.error);
            reject(event.target.error);
        };
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
async function saveVideoMetadata(videoData) {
    if (!db) await openDatabase(); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞
    return new Promise((resolve, reject) => {
        const transaction = db.transaction([VIDEO_STORE_NAME], 'readwrite');
        const store = transaction.objectStore(VIDEO_STORE_NAME);
        const request = store.add(videoData); // add() –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å

        request.onsuccess = () => {
            console.log('Video metadata saved:', videoData);
            resolve();
        };

        request.onerror = (event) => {
            console.error('Error saving video metadata:', event.target.error);
            reject(event.target.error);
        };
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
openDatabase().catch(error => console.error("Failed to open IndexedDB:", error));


// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ---
if (fileInput) {
    fileInput.addEventListener('change', () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–¥–µ–Ω–æ –ª–∏ –∏–º—è Instagram
        const instagramUsername = instagramInput.value.trim();
        if (!instagramUsername) {
            uploadStatus.textContent = 'Please enter your Instagram username before uploading videos.';
            instagramInput.focus(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ Instagram
            instagramInput.style.borderColor = 'red'; // –í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –æ—à–∏–±–∫–∏
            return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        } else {
            instagramInput.style.borderColor = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞–º–∫—É, –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª–µ–π
        const linkedin = document.getElementById('linkedinInput').value.trim();
        const email = document.getElementById('emailInput').value.trim();
        saveUser(instagramUsername, linkedin, email).catch(error => {
            console.error("Failed to save user data automatically:", error);
            // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        });


        if (fileInput.files.length) {
            uploadStatus.textContent = `Selected ${fileInput.files.length} file(s). Starting upload...`;
            videoInfoList.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
            uploadVideos(fileInput.files, instagramUsername); // –ü–µ—Ä–µ–¥–∞–µ–º –∏–º—è Instagram
        } else {
            uploadStatus.textContent = 'No files selected.';
            videoInfoList.innerHTML = '';
        }
    });
}

// --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∏–¥–µ–æ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ---
async function uploadVideos(files, instagramUsername) { // –î–æ–±–∞–≤–ª–µ–Ω instagramUsername
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (uploadLabel) {
        uploadLabel.style.pointerEvents = 'none';
        uploadLabel.style.opacity = '0.7';
    }

    for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const formData = new FormData();
        formData.append("file", file);

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
        const videoInfoItem = document.createElement('div');
        videoInfoItem.classList.add('video-info-item');
        videoInfoItem.id = `video-item-${i}`;

        const spoilerBtn = document.createElement('button');
        spoilerBtn.classList.add('spoiler-btn');
        spoilerBtn.id = `spoilerBtn-${i}`;
        // –ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–ø–æ–π–ª–µ—Ä–∞ —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
        spoilerBtn.innerHTML = `üìÅ <span id="fileName-${i}">${file.name}</span>`; // –£–±—Ä–∞–Ω–æ "Metadata"

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSS-–ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ 0%
        spoilerBtn.style.setProperty('--upload-progress', '0%');
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∑–æ–ª–æ—Ç–æ–≥–æ —Å—Ç–∏–ª—è —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏
        spoilerBtn.classList.add('loaded-spoiler-btn');


        const progressBarContainer = document.createElement('div');
        progressBarContainer.classList.add('progress-bar-container');
        const progressBar = document.createElement('div');
        progressBar.classList.add('progress-bar');
        progressBar.style.width = '0%';
        const progressText = document.createElement('span');
        progressText.classList.add('progress-text');
        progressText.textContent = '0%';

        progressBarContainer.appendChild(progressBar);
        progressBarContainer.appendChild(progressText);

        const metadataContent = document.createElement('div');
        metadataContent.classList.add('spoiler-content');
        metadataContent.id = `metadataContent-${i}`;

        videoInfoItem.appendChild(spoilerBtn);
        videoInfoItem.appendChild(progressBarContainer);
        videoInfoItem.appendChild(metadataContent);
        videoInfoList.appendChild(videoInfoItem);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–ø–æ–π–ª–µ—Ä–∞
        spoilerBtn.addEventListener('click', () => toggleSpoiler(metadataContent, spoilerBtn.querySelector('span')));

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ API
        await new Promise((resolve) => {
            const xhr = new XMLHttpRequest();
            xhr.open("POST", "https://video-meta-api.onrender.com/analyze"); // –í–∞—à API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

            xhr.upload.onprogress = function (e) {
                if (e.lengthComputable) {
                    const percent = Math.round((e.loaded / e.total) * 100);
                    progressBar.style.width = percent + "%";
                    progressText.textContent = `${percent}%`;
                    uploadStatus.textContent = `Uploading ${file.name}: ${percent}%`;

                    // –û–±–Ω–æ–≤–ª—è–µ–º CSS-–ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∑–∞–ª–∏–≤–∫–∏ –∫–Ω–æ–ø–∫–∏
                    spoilerBtn.style.setProperty('--upload-progress', `${percent}%`);
                }
            };

            xhr.onload = async function () { // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è await
                progressBarContainer.style.display = "none"; // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                uploadStatus.textContent = `Finished processing ${file.name}.`;

                // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–∞–ª–∏–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ 100%
                spoilerBtn.style.setProperty('--upload-progress', '100%');
                // –ö–ª–∞—Å—Å 'loaded-spoiler-btn' —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ

                if (xhr.status === 200) {
                    const data = JSON.parse(xhr.responseText);
                    // –ü–µ—Ä–µ–¥–∞–µ–º –∏–º—è Instagram –≤ showResult
                    showResult(data, metadataContent, spoilerBtn.querySelector('span'), instagramUsername);

                    // *** –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –≤ IndexedDB ***
                    const videoMetadataToSave = {
                        filename: data.filename,
                        size_bytes: data.size_bytes,
                        analyzed_at: data.analyzed_at,
                        instagramUsername: instagramUsername, // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        metadata: data.metadata // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    };
                    try {
                        await saveVideoMetadata(videoMetadataToSave);
                    } catch (dbError) {
                        console.error("Failed to save video metadata to IndexedDB:", dbError);
                        // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    }

                } else {
                    metadataContent.innerHTML = `<p style="color: red;">Upload failed for file: ${file.name}. Status: ${xhr.status}</p>`;
                    alert("Upload failed for file: " + file.name); // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–º–µ—Å—Ç–æ alert
                }
                resolve();
            };

            xhr.onerror = function() {
                metadataContent.innerHTML = `<p style="color: red;">Network error during upload for file: ${file.name}</p>`;
                uploadStatus.textContent = `Network error for ${file.name}.`;
                progressBarContainer.style.display = "none";
                alert("Network error during upload for file: " + file.name); // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–º–µ—Å—Ç–æ alert
                resolve();
            };

            xhr.send(formData);
        });
    }

    // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    if (uploadLabel) {
        uploadLabel.style.pointerEvents = 'auto';
        uploadLabel.style.opacity = '1';
    }
    uploadStatus.textContent = `All files processed.`;
}

// --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥ —Å–ø–æ–π–ª–µ—Ä–æ–º ---
function showResult(data, targetMetadataContent, targetFileNameSpan, uploadedByInstagram) { // –î–æ–±–∞–≤–ª–µ–Ω uploadedByInstagram
    const lines = [];

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è Instagram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (uploadedByInstagram) {
        lines.push(`Uploaded By: @${uploadedByInstagram}`);
    }
    lines.push(`File Name: ${data.filename}`);
    lines.push(`File Size: ${Math.round(data.size_bytes / 1024)} kB`);
    lines.push(`Analyzed At: ${data.analyzed_at}`);
    lines.push("");

    const meta = data.metadata || {};
    const format = meta.format || {};
    const tags = format.tags || {};

    for (const key in format) {
        if (typeof format[key] !== "object" && key !== "tags") { // –ò—Å–∫–ª—é—á–∞–µ–º 'tags' –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞
            lines.push(`${key}: ${format[key]}`);
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ —Ñ–æ—Ä–º–∞—Ç–∞
    if (Object.keys(tags).length > 0) {
        lines.push("--- Format Tags ---");
        for (const tag in tags) {
            lines.push(`${tag}: ${tags[tag]}`);
        }
    }


    if (meta.streams?.length) {
        meta.streams.forEach((stream, i) => {
            lines.push(`--- Stream #${i} ---`);
            for (const key in stream) {
                if (typeof stream[key] !== "object" && key !== "tags") { // –ò—Å–∫–ª—é—á–∞–µ–º 'tags' –∏–∑ –ø–æ—Ç–æ–∫–∞
                    lines.push(`${key}: ${stream[key]}`);
                }
            }
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –ø–æ—Ç–æ–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if (stream.tags && Object.keys(stream.tags).length > 0) {
                lines.push(`  Stream #${i} Tags:`);
                for (const tag in stream.tags) {
                    lines.push(`  ${tag}: ${stream.tags[tag]}`);
                }
            }
        });
    }

    if (data.metadata?.gps?.length) {
        lines.push("");
        lines.push("--- GPS Data ---");
        data.metadata.gps.forEach(gps => {
            lines.push(`GPS Tag: ${gps.tag}`);
            lines.push(`Location: ${gps.lat}, ${gps.lon}`);
            if (gps.address) lines.push(`Address: ${gps.address}`);
        });
    }

    const contentPre = document.createElement("pre");
    contentPre.textContent = lines.join("\n");
    targetMetadataContent.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
    targetMetadataContent.appendChild(contentPre);

    // *** –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–ø–æ–π–ª–µ—Ä–∞ —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è Instagram –∏ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ "Metadata" ***
    targetFileNameSpan.textContent = `üìÅ @${uploadedByInstagram} - ${data.filename}`;
}

// --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–ø–æ–π–ª–µ—Ä–∞ ---
function toggleSpoiler(metadataContentElement, fileNameSpanElement) {
    if (!metadataContentElement || !fileNameSpanElement) return;

    metadataContentElement.classList.toggle('visible');
    if (metadataContentElement.classList.contains('visible')) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–ø–æ–π–ª–µ—Ä–∞
        fileNameSpanElement.textContent = 'üìÇ ' + fileNameSpanElement.textContent.replace('üìÅ ', '') + ' (Hide)';
    } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–ø–æ–π–ª–µ—Ä–∞
        fileNameSpanElement.textContent = 'üìÅ ' + fileNameSpanElement.textContent.replace('üìÇ ', '').replace(' (Hide)', '');
    }
}

// --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π (–ø—Ä–∏–º–µ—Ä) ---
// –£–¥–∞–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ submit –¥–ª—è —Ñ–æ—Ä–º—ã, —Ç–∞–∫ –∫–∞–∫ –∫–Ω–æ–ø–∫–∞ "Save Socials" —É–¥–∞–ª–µ–Ω–∞.
// –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ.
