// analyze.js

// –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã DOM –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã upload.html
const fileInput = document.getElementById('videoUpload');
const uploadLabel = document.querySelector('.upload-label'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ label
const uploadStatus = document.getElementById('uploadStatus');
const videoInfoList = document.getElementById('videoInfoList'); // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ---
if (fileInput) {
    fileInput.addEventListener('change', () => {
        if (fileInput.files.length) {
            uploadStatus.textContent = `Selected ${fileInput.files.length} file(s). Starting upload...`;
            videoInfoList.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
            uploadVideos(fileInput.files);
        } else {
            uploadStatus.textContent = 'No files selected.';
            videoInfoList.innerHTML = '';
        }
    });
}

// --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∏–¥–µ–æ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ---
async function uploadVideos(files) {
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (uploadLabel) {
        uploadLabel.style.pointerEvents = 'none';
        uploadLabel.style.opacity = '0.7';
    }

    for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const formData = new FormData();
        formData.append("file", file);

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
        const videoInfoItem = document.createElement('div');
        videoInfoItem.classList.add('video-info-item');
        videoInfoItem.id = `video-item-${i}`;

        const spoilerBtn = document.createElement('button');
        spoilerBtn.classList.add('spoiler-btn');
        spoilerBtn.id = `spoilerBtn-${i}`;
        spoilerBtn.innerHTML = `üìÅ <span id="fileName-${i}">${file.name} Metadata</span>`;

        const progressBarContainer = document.createElement('div');
        progressBarContainer.classList.add('progress-bar-container');
        const progressBar = document.createElement('div');
        progressBar.classList.add('progress-bar');
        progressBar.style.width = '0%';
        const progressText = document.createElement('span');
        progressText.classList.add('progress-text');
        progressText.textContent = '0%';

        progressBarContainer.appendChild(progressBar);
        progressBarContainer.appendChild(progressText);

        const metadataContent = document.createElement('div');
        metadataContent.classList.add('spoiler-content');
        metadataContent.id = `metadataContent-${i}`;

        videoInfoItem.appendChild(spoilerBtn);
        videoInfoItem.appendChild(progressBarContainer);
        videoInfoItem.appendChild(metadataContent);
        videoInfoList.appendChild(videoInfoItem);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–ø–æ–π–ª–µ—Ä–∞
        spoilerBtn.addEventListener('click', () => toggleSpoiler(metadataContent, spoilerBtn.querySelector('span')));

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ API
        await new Promise((resolve) => {
            const xhr = new XMLHttpRequest();
            xhr.open("POST", "https://video-meta-api.onrender.com/analyze"); // –í–∞—à API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

            xhr.upload.onprogress = function (e) {
                if (e.lengthComputable) {
                    const percent = Math.round((e.loaded / e.total) * 100);
                    progressBar.style.width = percent + "%";
                    progressText.textContent = `${percent}%`;
                    uploadStatus.textContent = `Uploading ${file.name}: ${percent}%`;
                }
            };

            xhr.onload = function () {
                progressBarContainer.style.display = "none"; // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                uploadStatus.textContent = `Finished processing ${file.name}.`;

                if (xhr.status === 200) {
                    const data = JSON.parse(xhr.responseText);
                    showResult(data, metadataContent, spoilerBtn.querySelector('span')); // –ü–µ—Ä–µ–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                } else {
                    metadataContent.innerHTML = `<p style="color: red;">Upload failed for file: ${file.name}. Status: ${xhr.status}</p>`;
                    alert("Upload failed for file: " + file.name); // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–º–µ—Å—Ç–æ alert
                }
                resolve();
            };

            xhr.onerror = function() {
                metadataContent.innerHTML = `<p style="color: red;">Network error during upload for file: ${file.name}</p>`;
                uploadStatus.textContent = `Network error for ${file.name}.`;
                progressBarContainer.style.display = "none";
                alert("Network error during upload for file: " + file.name); // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–º–µ—Å—Ç–æ alert
                resolve();
            };

            xhr.send(formData);
        });
    }

    // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    if (uploadLabel) {
        uploadLabel.style.pointerEvents = 'auto';
        uploadLabel.style.opacity = '1';
    }
    uploadStatus.textContent = `All files processed.`;
}

// --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–¥ —Å–ø–æ–π–ª–µ—Ä–æ–º ---
function showResult(data, targetMetadataContent, targetFileNameSpan) {
    const lines = [];

    lines.push(`File Name: ${data.filename}`);
    lines.push(`File Size: ${Math.round(data.size_bytes / 1024)} kB`);
    lines.push(`Analyzed At: ${data.analyzed_at}`);
    lines.push("");

    const meta = data.metadata || {};
    const format = meta.format || {};
    const tags = format.tags || {};

    for (const key in format) {
        if (typeof format[key] !== "object" && key !== "tags") { // –ò—Å–∫–ª—é—á–∞–µ–º 'tags' –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞
            lines.push(`${key}: ${format[key]}`);
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ —Ñ–æ—Ä–º–∞—Ç–∞
    if (Object.keys(tags).length > 0) {
        lines.push("--- Format Tags ---");
        for (const tag in tags) {
            lines.push(`${tag}: ${tags[tag]}`);
        }
    }


    if (meta.streams?.length) {
        meta.streams.forEach((stream, i) => {
            lines.push(`--- Stream #${i} ---`);
            for (const key in stream) {
                if (typeof stream[key] !== "object" && key !== "tags") { // –ò—Å–∫–ª—é—á–∞–µ–º 'tags' –∏–∑ –ø–æ—Ç–æ–∫–∞
                    lines.push(`${key}: ${stream[key]}`);
                }
            }
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –ø–æ—Ç–æ–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if (stream.tags && Object.keys(stream.tags).length > 0) {
                lines.push(`  Stream #${i} Tags:`);
                for (const tag in stream.tags) {
                    lines.push(`  ${tag}: ${stream.tags[tag]}`);
                }
            }
        });
    }

    if (data.metadata?.gps?.length) {
        lines.push("");
        lines.push("--- GPS Data ---");
        data.metadata.gps.forEach(gps => {
            lines.push(`GPS Tag: ${gps.tag}`);
            lines.push(`Location: ${gps.lat}, ${gps.lon}`);
            if (gps.address) lines.push(`Address: ${gps.address}`);
        });
    }

    const contentPre = document.createElement("pre");
    contentPre.textContent = lines.join("\n");
    targetMetadataContent.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
    targetMetadataContent.appendChild(contentPre);

    // *** –ù–ï–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–¢–ö–†–´–¢–ò–Ø –°–ü–û–ô–õ–ï–†–ê –ó–î–ï–°–¨ ***
    // –°–ø–æ–π–ª–µ—Ä –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—ã–º, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∫–ª–∏–∫–Ω–µ—Ç
    targetFileNameSpan.textContent = 'üìÅ ' + data.filename + ' Metadata'; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–∫–æ–Ω–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞
}

// --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–ø–æ–π–ª–µ—Ä–∞ ---
function toggleSpoiler(metadataContentElement, fileNameSpanElement) {
    if (!metadataContentElement || !fileNameSpanElement) return;

    metadataContentElement.classList.toggle('visible');
    if (metadataContentElement.classList.contains('visible')) {
        fileNameSpanElement.textContent = 'üìÇ ' + fileNameSpanElement.textContent.replace('üìÅ ', '').replace(' Metadata', '') + ' Metadata (Hide)';
    } else {
        fileNameSpanElement.textContent = 'üìÅ ' + fileNameSpanElement.textContent.replace('üìÇ ', '').replace(' Metadata (Hide)', '') + ' Metadata';
    }
}

// --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π (–ø—Ä–∏–º–µ—Ä) ---
const socialForm = document.querySelector('.social-form');
if (socialForm) {
    socialForm.addEventListener('submit', (event) => {
        event.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã

        const instagram = document.getElementById('instagramInput').value;
        const linkedin = document.getElementById('linkedinInput').value;
        const email = document.getElementById('emailInput').value;

        console.log('Socials submitted:', { instagram, linkedin, email });
        // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –ª–æ–∫–∞–ª—å–Ω–æ
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–ª–∏ –¥—Ä—É–≥–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ alert()
        alert('Socials saved! (This is a demo alert, replace with better UI)');
    });
}
